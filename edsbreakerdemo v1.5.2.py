# edsbreaker v1.5.2
# programmed by Nathan Zuzow, 9/6/18-9/11/18

import datetime
import glob
import os
import re
import shutil
import sys
import time
import zipfile
from xml.etree import ElementTree as et
from pathlib import Path

version = 'demo v1.5.2'

# setting the base path
basePath = os.path.dirname(os.path.realpath(__file__))

# wildcard searching .eds
edsWildcard = '*.eds'
edsTarget = os.path.join(basePath, edsWildcard)
allEds = glob.glob(edsTarget)
listEds = list(allEds)
lenlistEds = str(len(listEds))
edsParsed = '.eds Files Parsed:'
eds = " ".join([edsParsed, lenlistEds])
print(eds)

# wildcard searching .sds
sdsWildcard = '*.sds'
sdsTarget = os.path.join(basePath, sdsWildcard)
allSds = glob.glob(sdsTarget)
listSds = list(allSds)
lenlistSds = str(len(listSds))
sdsParsed = '.sds Files Parsed:'
sds = " ".join([sdsParsed, lenlistSds])
print(sds)

# merging all data
allData = allEds + allSds
listData = list(allData)

# batch .zip generation
extPath = os.path.join(basePath, 'ext')
extpathTest = Path(extPath)

if extpathTest.is_dir():
    pass
else:
    os.mkdir(extPath)

for filePath in allData:
    fileName = os.path.basename(filePath)
    noExt = fileName[:-4]
    zipPath = os.path.join(extPath, noExt + '.zip')
    shutil.copyfile(filePath, zipPath)

# wildcard searching .zips
zipWildcard = '*.zip'
zipTarget = os.path.join(extPath, zipWildcard)
allZips = glob.glob(zipTarget)
listZips = list(allZips)
zips = print(".zip Files Created:", len(listZips), '\n')

# extract zips to individual folders in ext
for zipFile in allZips:
    filePath = os.path.join(extPath, zipFile)
    fileDest = os.path.join(extPath, zipFile[:-4])
    filedestTest = Path(fileDest)

    if filedestTest.is_dir():
        pass
    else:
        os.mkdir(fileDest)
        
    unzipMe = zipfile.ZipFile(filePath) 
    unzipMe.extractall(fileDest)
    unzipMe.close()

# parse the xml and text for each data file
for filePath in allData:
    fileName = os.path.basename(filePath)
    noExt = fileName[:-4]
    dataFolder = os.path.join(extPath, noExt)
    xmlfileLoc = os.path.join(dataFolder, "apldbio\\sds")
    os.chdir(xmlfileLoc)

    # establishing text path
    textPath = os.path.join(basePath, noExt + '.txt')
    textFile = open(textPath, 'a', encoding = 'utf-8')

    # converting manifest and messages to .txt
    maniPath = os.path.join(xmlfileLoc, 'manifest.mf')
    maniDest = os.path.join(xmlfileLoc, 'manifest.txt')
    shutil.copy(maniPath, maniDest)

    messPath = os.path.join(xmlfileLoc, 'messages.log')
    messDest = os.path.join(xmlfileLoc, 'messages.txt')
    
    # establishing xml element
    tree = et.parse('experiment.xml')
    root = tree.getroot()
    
    # printout
    textFile.write('This file was generated by edsbreaker ' + version + ' on ' + str(datetime.datetime.now()) + '\n')
    textFile.write(eds + '\n' + sds + '\n' + '\n')
        
    for element in root.iter('FileName'):
        title = 'Filename:'
        elementStr = str(element.text)
        joinString = " ".join([title, elementStr])
        print(joinString)
        textFile.write(joinString + '\n')

    for element in root.iter('InstrumentTypeId'):
        title = 'Instrument:'
        elementStr = str(element.text)
        joinString = " ".join([title, elementStr])
        print(joinString)
        textFile.write(joinString + '\n')

    for element in root.findall('.//*[@key="softwareVersion"]/String'):
        title = 'Software Version:'
        elementStr = str(element.text)
        joinString = " ".join([title, elementStr])
        print(joinString)
        textFile.write(joinString + '\n')

    manifest = open('manifest.txt', 'r', encoding = 'utf-8')
    
    for line in manifest:
        if re.match("(.*)(I|i)mplementation-Version(.*)", line):
            newline = 'Software Version:' + line[24:]
            # newline = newline.rstrip('\n')
            print(newline)
            textFile.write(newline)
    manifest.close()

    try:
        shutil.copy(messPath, messDest)
        messages = open('messages.txt', 'r', encoding = 'utf-8')
        messages.close()
    except FileNotFoundError:
        pass
        # print('**No messages.txt file available.**')
        
    for element in root.findall('.//*[@key="RUNTITLE"]/String'):
        title = 'Instrument Serial:'
        elementStr = str(element.text)
        joinString = " ".join([title, elementStr])
        print(joinString[0:28])
        textFile.write(joinString + '\n')

    for element in root.findall('.//*[@key="instrumentSerialNumber"]/String'):
        title = 'Instrument Serial:'
        elementStr = str(element.text)
        joinString = " ".join([title, elementStr])
        print(joinString)
        textFile.write(joinString + '\n')
        
    for element in root.findall('.//*[@key="blockSerialNumber"]/String'):
        title = 'Block Serial:'
        elementStr = str(element.text)
        joinString = " ".join([title, elementStr])
        print(joinString)
        textFile.write(joinString + '\n')

    for element in root.findall("./Type/Name"):
        title = 'Experiment Type:'
        elementStr = (element.text)
        joinString = " ".join([title, elementStr])
        print(joinString)
        textFile.write((joinString) + '\n')

    for element in root.findall("./ChemistryType"):
        title = 'Chemistry:'
        elementStr = str(element.text)
        joinString = " ".join([title, elementStr])
        print(joinString)
        textFile.write(joinString + '\n')

    for element in root.findall("./RunState"):
        title = 'Run State:'
        elementStr = str(element.text)
        joinString = " ".join([title, elementStr])
        print(joinString)
        textFile.write(joinString + '\n')     

    print('\n' + '\n')

    textFile.close()

# remove the ext directory
os.chdir(basePath)
shutil.rmtree('ext')

# text cleanout for troubleshooting
##txtWildcard = '*.txt'
##txtTarget = os.path.join(basePath, txtWildcard)
##allTxt = glob.glob(txtTarget)
##listTxt = list(allTxt)
##print(listTxt)
##
##for textFile in listTxt:
##    os.remove(textFile)

# WIP: compile to .exe
